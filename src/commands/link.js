// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block                   = require("bs-platform/lib/js/block.js");
var Curry                   = require("bs-platform/lib/js/curry.js");
var Chalk                   = require("chalk");
var Printf                  = require("bs-platform/lib/js/printf.js");
var Patches                 = require("../patches");
var Utils$ReasonTemplate    = require("./utils.js");
var Bindings$ReasonTemplate = require("./bindings.js");

function performLinking(name, source, root) {
  Bindings$ReasonTemplate.paint(/* None */0, "seeing if we can make a symlink");
  var nodeModulesPath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          "node_modules",
          /* [] */0
        ]
      ]);
  var symlinkPath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          "node_modules",
          /* :: */[
            name,
            /* [] */0
          ]
        ]
      ]);
  var outputPath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          "lib",
          /* :: */[
            "js",
            /* :: */[
              source,
              /* [] */0
            ]
          ]
        ]
      ]);
  if (!Utils$ReasonTemplate.Fs[/* safeFileExists */0](nodeModulesPath)) {
    Utils$ReasonTemplate.Fs[/* safeCreateDirectory */1](nodeModulesPath);
  }
  if (Utils$ReasonTemplate.Fs[/* safeFileExists */0](symlinkPath)) {
    return /* tuple */[
            /* false */0,
            /* Some */[Curry._2(Printf.sprintf(/* Format */[
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                " already exists in your ",
                                /* String */Block.__(2, [
                                    /* No_padding */0,
                                    /* String_literal */Block.__(11, [
                                        ", so we can't create a symlink",
                                        /* End_of_format */0
                                      ])
                                  ])
                              ])
                          ]),
                        "%s already exists in your %s, so we can't create a symlink"
                      ]), Chalk.bold(name), Chalk.bold("node_modules"))]
          ];
  } else {
    Bindings$ReasonTemplate.paint(/* None */0, "making symlink to output directory");
    var match = Utils$ReasonTemplate.Fs[/* safeCreateSymlink */3](outputPath, symlinkPath);
    if (match !== 0) {
      return /* tuple */[
              /* true */1,
              /* Some */["import your reason code with " + Chalk.yellow("require('" + (name + "');"))]
            ];
    } else {
      return /* tuple */[
              /* false */0,
              /* Some */["something went wrong when creating the symlink"]
            ];
    }
  }
}

function createPostinstall(name, source, root) {
  Bindings$ReasonTemplate.paint(/* None */0, "preparing to add a postinstall script");
  var packagePath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          "package.json",
          /* [] */0
        ]
      ]);
  var source$1 = Utils$ReasonTemplate.Path[/* combinePaths */1](/* Some */[/* false */0], /* :: */[
        "..",
        /* :: */[
          "lib",
          /* :: */[
            "js",
            /* :: */[
              source,
              /* [] */0
            ]
          ]
        ]
      ]);
  var dest = Utils$ReasonTemplate.Path[/* combinePaths */1](/* Some */[/* false */0], /* :: */[
        ".",
        /* :: */[
          "node_modules",
          /* :: */[
            name,
            /* [] */0
          ]
        ]
      ]);
  var command = Curry._2(Printf.sprintf(/* Format */[
            /* String_literal */Block.__(11, [
                "node -e \"var s='",
                /* String */Block.__(2, [
                    /* No_padding */0,
                    /* String_literal */Block.__(11, [
                        "',d='",
                        /* String */Block.__(2, [
                            /* No_padding */0,
                            /* String_literal */Block.__(11, [
                                "',fs=require('fs');if(fs.existsSync(d)===false){fs.symlinkSync(s,d,'dir')};\"",
                                /* End_of_format */0
                              ])
                          ])
                      ])
                  ])
              ]),
            "node -e \"var s='%s',d='%s',fs=require('fs');if(fs.existsSync(d)===false){fs.symlinkSync(s,d,'dir')};\""
          ]), source$1, dest);
  Bindings$ReasonTemplate.paint(/* None */0, "adding the postinstall script to your package file");
  return /* tuple */[
          +Patches.editPackageScripts(packagePath, command),
          /* None */0
        ];
}

function main(name, source, root, version) {
  process.stdout.write(Chalk.bold(Chalk.white(Curry._1(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "add-reason link v",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* Char_literal */Block.__(12, [
                                    /* "\n" */10,
                                    /* End_of_format */0
                                  ])
                              ])
                          ]),
                        "add-reason link v%s\n"
                      ]), version))));
  var stepsAsFunctions_001 = /* :: */[
    createPostinstall,
    /* [] */0
  ];
  var stepsAsFunctions = /* :: */[
    performLinking,
    stepsAsFunctions_001
  ];
  var match = Utils$ReasonTemplate.execute(stepsAsFunctions, name, source, root);
  if (match[0] !== 0) {
    Bindings$ReasonTemplate.success(/* () */0);
  } else {
    Bindings$ReasonTemplate.failure(/* () */0);
  }
  return Utils$ReasonTemplate.printList(match[1]);
}

exports.performLinking    = performLinking;
exports.createPostinstall = createPostinstall;
exports.main              = main;
/* chalk Not a pure module */
