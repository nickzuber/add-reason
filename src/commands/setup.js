// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block                   = require("bs-platform/lib/js/block.js");
var Curry                   = require("bs-platform/lib/js/curry.js");
var Chalk                   = require("chalk");
var Printf                  = require("bs-platform/lib/js/printf.js");
var Link$ReasonTemplate     = require("./link.js");
var Utils$ReasonTemplate    = require("./utils.js");
var Config$ReasonTemplate   = require("./config.js");
var Linter$ReasonTemplate   = require("./linter.js");
var Bindings$ReasonTemplate = require("./bindings.js");

function prepareTargetDirectory(_, source, root) {
  Bindings$ReasonTemplate.paint(/* None */0, "looking for source directory");
  var sourcePath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          source,
          /* [] */0
        ]
      ]);
  var outputPath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          "lib",
          /* :: */[
            "js",
            /* :: */[
              source,
              /* [] */0
            ]
          ]
        ]
      ]);
  if (Utils$ReasonTemplate.Fs[/* safeFileExists */0](sourcePath)) {
    Bindings$ReasonTemplate.paint(/* None */0, "creating target directory");
    return /* tuple */[
            Utils$ReasonTemplate.Fs[/* safeCreateDirectory */1](outputPath),
            /* None */0
          ];
  } else {
    return /* tuple */[
            /* false */0,
            /* Some */["couldn't find " + (Chalk.bold(source) + ", do you have a typo?")]
          ];
  }
}

function main(name, source, root, version, linking) {
  process.stdout.write(Chalk.bold(Chalk.white(Curry._1(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "add-reason setup v",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* Char_literal */Block.__(12, [
                                    /* "\n" */10,
                                    /* End_of_format */0
                                  ])
                              ])
                          ]),
                        "add-reason setup v%s\n"
                      ]), version))));
  var stepsAsFunctions = linking ? /* :: */[
      prepareTargetDirectory,
      /* :: */[
        Config$ReasonTemplate.createBuildingConfig,
        /* :: */[
          Linter$ReasonTemplate.createLintingConfig,
          /* :: */[
            Link$ReasonTemplate.performLinking,
            /* :: */[
              Link$ReasonTemplate.createPostinstall,
              /* [] */0
            ]
          ]
        ]
      ]
    ] : /* :: */[
      prepareTargetDirectory,
      /* :: */[
        Config$ReasonTemplate.createBuildingConfig,
        /* :: */[
          Linter$ReasonTemplate.createLintingConfig,
          /* [] */0
        ]
      ]
    ];
  var match = Utils$ReasonTemplate.execute(stepsAsFunctions, name, source, root);
  if (match[0] !== 0) {
    Bindings$ReasonTemplate.success(/* () */0);
  } else {
    Bindings$ReasonTemplate.failure(/* () */0);
  }
  return Utils$ReasonTemplate.printList(match[1]);
}

exports.prepareTargetDirectory = prepareTargetDirectory;
exports.main                   = main;
/* chalk Not a pure module */
