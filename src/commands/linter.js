// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Block                   = require("bs-platform/lib/js/block.js");
var Curry                   = require("bs-platform/lib/js/curry.js");
var Chalk                   = require("chalk");
var Printf                  = require("bs-platform/lib/js/printf.js");
var Patches                 = require("../patches");
var Utils$ReasonTemplate    = require("./utils.js");
var Bindings$ReasonTemplate = require("./bindings.js");

function createLintingConfig(_, source, root) {
  Bindings$ReasonTemplate.paint(/* None */0, "looking for linting config");
  var configPath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          ".merlin",
          /* [] */0
        ]
      ]);
  var nodeModulesPath = Utils$ReasonTemplate.Path[/* combinePaths */1](/* None */0, /* :: */[
        root,
        /* :: */[
          "node_modules",
          /* [] */0
        ]
      ]);
  var contents = Patches.generateMerlinContents(source, nodeModulesPath);
  if (Utils$ReasonTemplate.Fs[/* safeFileExists */0](configPath)) {
    return /* tuple */[
            /* true */1,
            /* None */0
          ];
  } else {
    Bindings$ReasonTemplate.paint(/* None */0, "creating linting config");
    return /* tuple */[
            Utils$ReasonTemplate.Fs[/* safeCreateFile */2](configPath, contents),
            /* Some */["created " + Chalk.yellow(".merlin")]
          ];
  }
}

function main(source, root, version) {
  process.stdout.write(Chalk.bold(Chalk.white(Curry._1(Printf.sprintf(/* Format */[
                        /* String_literal */Block.__(11, [
                            "add-reason linter v",
                            /* String */Block.__(2, [
                                /* No_padding */0,
                                /* Char_literal */Block.__(12, [
                                    /* "\n" */10,
                                    /* End_of_format */0
                                  ])
                              ])
                          ]),
                        "add-reason linter v%s\n"
                      ]), version))));
  var stepsAsFunctions = /* :: */[
    createLintingConfig,
    /* [] */0
  ];
  var match = Utils$ReasonTemplate.execute(stepsAsFunctions, /* () */0, source, root);
  if (match[0] !== 0) {
    Bindings$ReasonTemplate.success(/* () */0);
  } else {
    Bindings$ReasonTemplate.failure(/* () */0);
  }
  return Utils$ReasonTemplate.printList(match[1]);
}

exports.createLintingConfig = createLintingConfig;
exports.main                = main;
/* chalk Not a pure module */
